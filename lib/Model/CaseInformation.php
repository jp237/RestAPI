<?php
/**
 * CaseInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  VOP\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * V.O.P GmbH & Co. KG - Rest API
 *
 * Rest API-Endpoint
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.22
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VOP\Rest\Model;

use \ArrayAccess;
use \VOP\Rest\ObjectSerializer;

/**
 * CaseInformation Class Doc Comment
 *
 * @category Class
 * @package  VOP\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CaseInformation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CaseInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'internal_id' => 'string',
'bsid' => 'string',
'case_id' => 'string',
'customer_case_id' => 'string',
'created_at' => 'string',
'case_contact_person' => '\VOP\Rest\Model\CaseContactPerson',
'title_date' => 'string',
'debtors' => '\VOP\Rest\Model\DebtorInformation[]',
'creditor' => '\VOP\Rest\Model\CreditorInformation',
'history_information' => '\VOP\Rest\Model\CaseHistoryInformation[]',
'case_status' => 'string',
'invoice_list' => 'string[]',
'html' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'internal_id' => null,
'bsid' => null,
'case_id' => null,
'customer_case_id' => null,
'created_at' => null,
'case_contact_person' => null,
'title_date' => null,
'debtors' => null,
'creditor' => null,
'history_information' => null,
'case_status' => null,
'invoice_list' => null,
'html' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'internal_id' => 'internalId',
'bsid' => 'bsid',
'case_id' => 'caseId',
'customer_case_id' => 'customerCaseId',
'created_at' => 'createdAt',
'case_contact_person' => 'caseContactPerson',
'title_date' => 'titleDate',
'debtors' => 'debtors',
'creditor' => 'creditor',
'history_information' => 'historyInformation',
'case_status' => 'caseStatus',
'invoice_list' => 'invoiceList',
'html' => 'html'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'internal_id' => 'setInternalId',
'bsid' => 'setBsid',
'case_id' => 'setCaseId',
'customer_case_id' => 'setCustomerCaseId',
'created_at' => 'setCreatedAt',
'case_contact_person' => 'setCaseContactPerson',
'title_date' => 'setTitleDate',
'debtors' => 'setDebtors',
'creditor' => 'setCreditor',
'history_information' => 'setHistoryInformation',
'case_status' => 'setCaseStatus',
'invoice_list' => 'setInvoiceList',
'html' => 'setHtml'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'internal_id' => 'getInternalId',
'bsid' => 'getBsid',
'case_id' => 'getCaseId',
'customer_case_id' => 'getCustomerCaseId',
'created_at' => 'getCreatedAt',
'case_contact_person' => 'getCaseContactPerson',
'title_date' => 'getTitleDate',
'debtors' => 'getDebtors',
'creditor' => 'getCreditor',
'history_information' => 'getHistoryInformation',
'case_status' => 'getCaseStatus',
'invoice_list' => 'getInvoiceList',
'html' => 'getHtml'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['internal_id'] = isset($data['internal_id']) ? $data['internal_id'] : null;
        $this->container['bsid'] = isset($data['bsid']) ? $data['bsid'] : null;
        $this->container['case_id'] = isset($data['case_id']) ? $data['case_id'] : null;
        $this->container['customer_case_id'] = isset($data['customer_case_id']) ? $data['customer_case_id'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['case_contact_person'] = isset($data['case_contact_person']) ? $data['case_contact_person'] : null;
        $this->container['title_date'] = isset($data['title_date']) ? $data['title_date'] : null;
        $this->container['debtors'] = isset($data['debtors']) ? $data['debtors'] : null;
        $this->container['creditor'] = isset($data['creditor']) ? $data['creditor'] : null;
        $this->container['history_information'] = isset($data['history_information']) ? $data['history_information'] : null;
        $this->container['case_status'] = isset($data['case_status']) ? $data['case_status'] : null;
        $this->container['invoice_list'] = isset($data['invoice_list']) ? $data['invoice_list'] : null;
        $this->container['html'] = isset($data['html']) ? $data['html'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets internal_id
     *
     * @return string
     */
    public function getInternalId()
    {
        return $this->container['internal_id'];
    }

    /**
     * Sets internal_id
     *
     * @param string $internal_id internalId
     *
     * @return $this
     */
    public function setInternalId($internal_id)
    {
        $this->container['internal_id'] = $internal_id;

        return $this;
    }

    /**
     * Gets bsid
     *
     * @return string
     */
    public function getBsid()
    {
        return $this->container['bsid'];
    }

    /**
     * Sets bsid
     *
     * @param string $bsid bsid
     *
     * @return $this
     */
    public function setBsid($bsid)
    {
        $this->container['bsid'] = $bsid;

        return $this;
    }

    /**
     * Gets case_id
     *
     * @return string
     */
    public function getCaseId()
    {
        return $this->container['case_id'];
    }

    /**
     * Sets case_id
     *
     * @param string $case_id case id
     *
     * @return $this
     */
    public function setCaseId($case_id)
    {
        $this->container['case_id'] = $case_id;

        return $this;
    }

    /**
     * Gets customer_case_id
     *
     * @return string
     */
    public function getCustomerCaseId()
    {
        return $this->container['customer_case_id'];
    }

    /**
     * Sets customer_case_id
     *
     * @param string $customer_case_id customerCaseId
     *
     * @return $this
     */
    public function setCustomerCaseId($customer_case_id)
    {
        $this->container['customer_case_id'] = $customer_case_id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at date of case creation
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets case_contact_person
     *
     * @return \VOP\Rest\Model\CaseContactPerson
     */
    public function getCaseContactPerson()
    {
        return $this->container['case_contact_person'];
    }

    /**
     * Sets case_contact_person
     *
     * @param \VOP\Rest\Model\CaseContactPerson $case_contact_person case_contact_person
     *
     * @return $this
     */
    public function setCaseContactPerson($case_contact_person)
    {
        $this->container['case_contact_person'] = $case_contact_person;

        return $this;
    }

    /**
     * Gets title_date
     *
     * @return string
     */
    public function getTitleDate()
    {
        return $this->container['title_date'];
    }

    /**
     * Sets title_date
     *
     * @param string $title_date date of case creation
     *
     * @return $this
     */
    public function setTitleDate($title_date)
    {
        $this->container['title_date'] = $title_date;

        return $this;
    }

    /**
     * Gets debtors
     *
     * @return \VOP\Rest\Model\DebtorInformation[]
     */
    public function getDebtors()
    {
        return $this->container['debtors'];
    }

    /**
     * Sets debtors
     *
     * @param \VOP\Rest\Model\DebtorInformation[] $debtors date of case creation
     *
     * @return $this
     */
    public function setDebtors($debtors)
    {
        $this->container['debtors'] = $debtors;

        return $this;
    }

    /**
     * Gets creditor
     *
     * @return \VOP\Rest\Model\CreditorInformation
     */
    public function getCreditor()
    {
        return $this->container['creditor'];
    }

    /**
     * Sets creditor
     *
     * @param \VOP\Rest\Model\CreditorInformation $creditor creditor
     *
     * @return $this
     */
    public function setCreditor($creditor)
    {
        $this->container['creditor'] = $creditor;

        return $this;
    }

    /**
     * Gets history_information
     *
     * @return \VOP\Rest\Model\CaseHistoryInformation[]
     */
    public function getHistoryInformation()
    {
        return $this->container['history_information'];
    }

    /**
     * Sets history_information
     *
     * @param \VOP\Rest\Model\CaseHistoryInformation[] $history_information HistoryInformation table
     *
     * @return $this
     */
    public function setHistoryInformation($history_information)
    {
        $this->container['history_information'] = $history_information;

        return $this;
    }

    /**
     * Gets case_status
     *
     * @return string
     */
    public function getCaseStatus()
    {
        return $this->container['case_status'];
    }

    /**
     * Sets case_status
     *
     * @param string $case_status Statusinformation for case
     *
     * @return $this
     */
    public function setCaseStatus($case_status)
    {
        $this->container['case_status'] = $case_status;

        return $this;
    }

    /**
     * Gets invoice_list
     *
     * @return string[]
     */
    public function getInvoiceList()
    {
        return $this->container['invoice_list'];
    }

    /**
     * Sets invoice_list
     *
     * @param string[] $invoice_list invoices in this case
     *
     * @return $this
     */
    public function setInvoiceList($invoice_list)
    {
        $this->container['invoice_list'] = $invoice_list;

        return $this;
    }

    /**
     * Gets html
     *
     * @return string
     */
    public function getHtml()
    {
        return $this->container['html'];
    }

    /**
     * Sets html
     *
     * @param string $html html view
     *
     * @return $this
     */
    public function setHtml($html)
    {
        $this->container['html'] = $html;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
