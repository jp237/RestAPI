<?php
/**
 * BoniGatewayResultResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  VOP\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * V.O.P GmbH & Co. KG - Rest API
 *
 * Rest API-Endpoint
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.22
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VOP\Rest\Model;

use \ArrayAccess;
use \VOP\Rest\ObjectSerializer;

/**
 * BoniGatewayResultResponse Class Doc Comment
 *
 * @category Class
 * @package  VOP\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BoniGatewayResultResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BoniGatewayResultResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'internal_id' => 'string',
'cached_internal_id' => 'string',
'address_data' => '\VOP\Rest\Model\AddressData',
'score' => '\VOP\Rest\Model\ScoreInformation',
'product_code' => 'int',
'secure_payment' => 'bool',
'raw_data' => 'object',
'document' => 'object',
'project' => 'object',
'additional_texts' => 'string[]',
'identity_flags' => '\VOP\Rest\Model\PrivatIdentityFlags',
'logs' => 'string[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'internal_id' => null,
'cached_internal_id' => null,
'address_data' => null,
'score' => null,
'product_code' => null,
'secure_payment' => null,
'raw_data' => null,
'document' => null,
'project' => null,
'additional_texts' => null,
'identity_flags' => null,
'logs' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'internal_id' => 'internalId',
'cached_internal_id' => 'cachedInternalId',
'address_data' => 'addressData',
'score' => 'score',
'product_code' => 'productCode',
'secure_payment' => 'secure_payment',
'raw_data' => 'rawData',
'document' => 'document',
'project' => 'project',
'additional_texts' => 'additionalTexts',
'identity_flags' => 'identityFlags',
'logs' => 'logs'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'internal_id' => 'setInternalId',
'cached_internal_id' => 'setCachedInternalId',
'address_data' => 'setAddressData',
'score' => 'setScore',
'product_code' => 'setProductCode',
'secure_payment' => 'setSecurePayment',
'raw_data' => 'setRawData',
'document' => 'setDocument',
'project' => 'setProject',
'additional_texts' => 'setAdditionalTexts',
'identity_flags' => 'setIdentityFlags',
'logs' => 'setLogs'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'internal_id' => 'getInternalId',
'cached_internal_id' => 'getCachedInternalId',
'address_data' => 'getAddressData',
'score' => 'getScore',
'product_code' => 'getProductCode',
'secure_payment' => 'getSecurePayment',
'raw_data' => 'getRawData',
'document' => 'getDocument',
'project' => 'getProject',
'additional_texts' => 'getAdditionalTexts',
'identity_flags' => 'getIdentityFlags',
'logs' => 'getLogs'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['internal_id'] = isset($data['internal_id']) ? $data['internal_id'] : null;
        $this->container['cached_internal_id'] = isset($data['cached_internal_id']) ? $data['cached_internal_id'] : null;
        $this->container['address_data'] = isset($data['address_data']) ? $data['address_data'] : null;
        $this->container['score'] = isset($data['score']) ? $data['score'] : null;
        $this->container['product_code'] = isset($data['product_code']) ? $data['product_code'] : null;
        $this->container['secure_payment'] = isset($data['secure_payment']) ? $data['secure_payment'] : null;
        $this->container['raw_data'] = isset($data['raw_data']) ? $data['raw_data'] : null;
        $this->container['document'] = isset($data['document']) ? $data['document'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['additional_texts'] = isset($data['additional_texts']) ? $data['additional_texts'] : null;
        $this->container['identity_flags'] = isset($data['identity_flags']) ? $data['identity_flags'] : null;
        $this->container['logs'] = isset($data['logs']) ? $data['logs'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets internal_id
     *
     * @return string
     */
    public function getInternalId()
    {
        return $this->container['internal_id'];
    }

    /**
     * Sets internal_id
     *
     * @param string $internal_id internal id request
     *
     * @return $this
     */
    public function setInternalId($internal_id)
    {
        $this->container['internal_id'] = $internal_id;

        return $this;
    }

    /**
     * Gets cached_internal_id
     *
     * @return string
     */
    public function getCachedInternalId()
    {
        return $this->container['cached_internal_id'];
    }

    /**
     * Sets cached_internal_id
     *
     * @param string $cached_internal_id internal id from the cached response
     *
     * @return $this
     */
    public function setCachedInternalId($cached_internal_id)
    {
        $this->container['cached_internal_id'] = $cached_internal_id;

        return $this;
    }

    /**
     * Gets address_data
     *
     * @return \VOP\Rest\Model\AddressData
     */
    public function getAddressData()
    {
        return $this->container['address_data'];
    }

    /**
     * Sets address_data
     *
     * @param \VOP\Rest\Model\AddressData $address_data address_data
     *
     * @return $this
     */
    public function setAddressData($address_data)
    {
        $this->container['address_data'] = $address_data;

        return $this;
    }

    /**
     * Gets score
     *
     * @return \VOP\Rest\Model\ScoreInformation
     */
    public function getScore()
    {
        return $this->container['score'];
    }

    /**
     * Sets score
     *
     * @param \VOP\Rest\Model\ScoreInformation $score score
     *
     * @return $this
     */
    public function setScore($score)
    {
        $this->container['score'] = $score;

        return $this;
    }

    /**
     * Gets product_code
     *
     * @return int
     */
    public function getProductCode()
    {
        return $this->container['product_code'];
    }

    /**
     * Sets product_code
     *
     * @param int $product_code Product code of response
     *
     * @return $this
     */
    public function setProductCode($product_code)
    {
        $this->container['product_code'] = $product_code;

        return $this;
    }

    /**
     * Gets secure_payment
     *
     * @return bool
     */
    public function getSecurePayment()
    {
        return $this->container['secure_payment'];
    }

    /**
     * Sets secure_payment
     *
     * @param bool $secure_payment flag to secure payment
     *
     * @return $this
     */
    public function setSecurePayment($secure_payment)
    {
        $this->container['secure_payment'] = $secure_payment;

        return $this;
    }

    /**
     * Gets raw_data
     *
     * @return object
     */
    public function getRawData()
    {
        return $this->container['raw_data'];
    }

    /**
     * Sets raw_data
     *
     * @param object $raw_data raw data of response
     *
     * @return $this
     */
    public function setRawData($raw_data)
    {
        $this->container['raw_data'] = $raw_data;

        return $this;
    }

    /**
     * Gets document
     *
     * @return object
     */
    public function getDocument()
    {
        return $this->container['document'];
    }

    /**
     * Sets document
     *
     * @param object $document base64encoded document
     *
     * @return $this
     */
    public function setDocument($document)
    {
        $this->container['document'] = $document;

        return $this;
    }

    /**
     * Gets project
     *
     * @return object
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param object $project ProjectInformation document
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets additional_texts
     *
     * @return string[]
     */
    public function getAdditionalTexts()
    {
        return $this->container['additional_texts'];
    }

    /**
     * Sets additional_texts
     *
     * @param string[] $additional_texts Additional Text Responses
     *
     * @return $this
     */
    public function setAdditionalTexts($additional_texts)
    {
        $this->container['additional_texts'] = $additional_texts;

        return $this;
    }

    /**
     * Gets identity_flags
     *
     * @return \VOP\Rest\Model\PrivatIdentityFlags
     */
    public function getIdentityFlags()
    {
        return $this->container['identity_flags'];
    }

    /**
     * Sets identity_flags
     *
     * @param \VOP\Rest\Model\PrivatIdentityFlags $identity_flags identity_flags
     *
     * @return $this
     */
    public function setIdentityFlags($identity_flags)
    {
        $this->container['identity_flags'] = $identity_flags;

        return $this;
    }

    /**
     * Gets logs
     *
     * @return string[]
     */
    public function getLogs()
    {
        return $this->container['logs'];
    }

    /**
     * Sets logs
     *
     * @param string[] $logs additional loggin data
     *
     * @return $this
     */
    public function setLogs($logs)
    {
        $this->container['logs'] = $logs;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
