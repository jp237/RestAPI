<?php
/**
 * CustomerAddressInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  VOP\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * V.O.P GmbH & Co. KG - Rest API
 *
 * Rest API-Endpoint
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.22
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VOP\Rest\Model;

use \ArrayAccess;
use \VOP\Rest\ObjectSerializer;

/**
 * CustomerAddressInformation Class Doc Comment
 *
 * @category Class
 * @package  VOP\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerAddressInformation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CustomerAddressInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'internal_id1' => 'int',
'internal_id2' => 'int',
'internal_id3' => 'int',
'shop_id' => 'int',
'company' => 'string',
'firstname' => 'string',
'lastname' => 'string',
'zipcode' => 'string',
'street' => 'string',
'city' => 'string',
'email' => 'string',
'tax' => 'bool',
'vat_id' => 'string',
'technical_information' => '\VOP\Rest\Model\CustomerContactInformation',
'auth_token' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'internal_id1' => null,
'internal_id2' => null,
'internal_id3' => null,
'shop_id' => null,
'company' => null,
'firstname' => null,
'lastname' => null,
'zipcode' => null,
'street' => null,
'city' => null,
'email' => null,
'tax' => null,
'vat_id' => null,
'technical_information' => null,
'auth_token' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'internal_id1' => 'internalId1',
'internal_id2' => 'internalId2',
'internal_id3' => 'internalId3',
'shop_id' => 'shopId',
'company' => 'company',
'firstname' => 'firstname',
'lastname' => 'lastname',
'zipcode' => 'zipcode',
'street' => 'street',
'city' => 'city',
'email' => 'email',
'tax' => 'tax',
'vat_id' => 'vatId',
'technical_information' => 'technicalInformation',
'auth_token' => 'authToken'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'internal_id1' => 'setInternalId1',
'internal_id2' => 'setInternalId2',
'internal_id3' => 'setInternalId3',
'shop_id' => 'setShopId',
'company' => 'setCompany',
'firstname' => 'setFirstname',
'lastname' => 'setLastname',
'zipcode' => 'setZipcode',
'street' => 'setStreet',
'city' => 'setCity',
'email' => 'setEmail',
'tax' => 'setTax',
'vat_id' => 'setVatId',
'technical_information' => 'setTechnicalInformation',
'auth_token' => 'setAuthToken'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'internal_id1' => 'getInternalId1',
'internal_id2' => 'getInternalId2',
'internal_id3' => 'getInternalId3',
'shop_id' => 'getShopId',
'company' => 'getCompany',
'firstname' => 'getFirstname',
'lastname' => 'getLastname',
'zipcode' => 'getZipcode',
'street' => 'getStreet',
'city' => 'getCity',
'email' => 'getEmail',
'tax' => 'getTax',
'vat_id' => 'getVatId',
'technical_information' => 'getTechnicalInformation',
'auth_token' => 'getAuthToken'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['internal_id1'] = isset($data['internal_id1']) ? $data['internal_id1'] : null;
        $this->container['internal_id2'] = isset($data['internal_id2']) ? $data['internal_id2'] : null;
        $this->container['internal_id3'] = isset($data['internal_id3']) ? $data['internal_id3'] : null;
        $this->container['shop_id'] = isset($data['shop_id']) ? $data['shop_id'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['firstname'] = isset($data['firstname']) ? $data['firstname'] : null;
        $this->container['lastname'] = isset($data['lastname']) ? $data['lastname'] : null;
        $this->container['zipcode'] = isset($data['zipcode']) ? $data['zipcode'] : null;
        $this->container['street'] = isset($data['street']) ? $data['street'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['tax'] = isset($data['tax']) ? $data['tax'] : null;
        $this->container['vat_id'] = isset($data['vat_id']) ? $data['vat_id'] : null;
        $this->container['technical_information'] = isset($data['technical_information']) ? $data['technical_information'] : null;
        $this->container['auth_token'] = isset($data['auth_token']) ? $data['auth_token'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id pk customer
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets internal_id1
     *
     * @return int
     */
    public function getInternalId1()
    {
        return $this->container['internal_id1'];
    }

    /**
     * Sets internal_id1
     *
     * @param int $internal_id1 internalId1
     *
     * @return $this
     */
    public function setInternalId1($internal_id1)
    {
        $this->container['internal_id1'] = $internal_id1;

        return $this;
    }

    /**
     * Gets internal_id2
     *
     * @return int
     */
    public function getInternalId2()
    {
        return $this->container['internal_id2'];
    }

    /**
     * Sets internal_id2
     *
     * @param int $internal_id2 Internal id 2
     *
     * @return $this
     */
    public function setInternalId2($internal_id2)
    {
        $this->container['internal_id2'] = $internal_id2;

        return $this;
    }

    /**
     * Gets internal_id3
     *
     * @return int
     */
    public function getInternalId3()
    {
        return $this->container['internal_id3'];
    }

    /**
     * Sets internal_id3
     *
     * @param int $internal_id3 Internal id 3
     *
     * @return $this
     */
    public function setInternalId3($internal_id3)
    {
        $this->container['internal_id3'] = $internal_id3;

        return $this;
    }

    /**
     * Gets shop_id
     *
     * @return int
     */
    public function getShopId()
    {
        return $this->container['shop_id'];
    }

    /**
     * Sets shop_id
     *
     * @param int $shop_id internal mapping
     *
     * @return $this
     */
    public function setShopId($shop_id)
    {
        $this->container['shop_id'] = $shop_id;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string $company Company Name
     *
     * @return $this
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets firstname
     *
     * @return string
     */
    public function getFirstname()
    {
        return $this->container['firstname'];
    }

    /**
     * Sets firstname
     *
     * @param string $firstname Company owner firstname
     *
     * @return $this
     */
    public function setFirstname($firstname)
    {
        $this->container['firstname'] = $firstname;

        return $this;
    }

    /**
     * Gets lastname
     *
     * @return string
     */
    public function getLastname()
    {
        return $this->container['lastname'];
    }

    /**
     * Sets lastname
     *
     * @param string $lastname Company owner lastname
     *
     * @return $this
     */
    public function setLastname($lastname)
    {
        $this->container['lastname'] = $lastname;

        return $this;
    }

    /**
     * Gets zipcode
     *
     * @return string
     */
    public function getZipcode()
    {
        return $this->container['zipcode'];
    }

    /**
     * Sets zipcode
     *
     * @param string $zipcode company zipcode
     *
     * @return $this
     */
    public function setZipcode($zipcode)
    {
        $this->container['zipcode'] = $zipcode;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string $street Company street
     *
     * @return $this
     */
    public function setStreet($street)
    {
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city Company city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Company Email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return bool
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param bool $tax Tax
     *
     * @return $this
     */
    public function setTax($tax)
    {
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets vat_id
     *
     * @return string
     */
    public function getVatId()
    {
        return $this->container['vat_id'];
    }

    /**
     * Sets vat_id
     *
     * @param string $vat_id companys auth token
     *
     * @return $this
     */
    public function setVatId($vat_id)
    {
        $this->container['vat_id'] = $vat_id;

        return $this;
    }

    /**
     * Gets technical_information
     *
     * @return \VOP\Rest\Model\CustomerContactInformation
     */
    public function getTechnicalInformation()
    {
        return $this->container['technical_information'];
    }

    /**
     * Sets technical_information
     *
     * @param \VOP\Rest\Model\CustomerContactInformation $technical_information technical_information
     *
     * @return $this
     */
    public function setTechnicalInformation($technical_information)
    {
        $this->container['technical_information'] = $technical_information;

        return $this;
    }

    /**
     * Gets auth_token
     *
     * @return string
     */
    public function getAuthToken()
    {
        return $this->container['auth_token'];
    }

    /**
     * Sets auth_token
     *
     * @param string $auth_token companys auth token
     *
     * @return $this
     */
    public function setAuthToken($auth_token)
    {
        $this->container['auth_token'] = $auth_token;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
