<?php
/**
 * VopInvoiceDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  VOP\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * V.O.P GmbH & Co. KG - Rest API
 *
 * Rest API-Endpoint
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.22
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VOP\Rest\Model;

use \ArrayAccess;
use \VOP\Rest\ObjectSerializer;

/**
 * VopInvoiceDetail Class Doc Comment
 *
 * @category Class
 * @package  VOP\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VopInvoiceDetail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VopInvoiceDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'mingeb' => 'float',
'maxgeb' => 'float',
'gebtext' => 'float',
'gebuehr' => 'float',
'gebuehr1' => 'float',
'rownumber' => 'int',
'type' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'mingeb' => 'float',
'maxgeb' => 'float',
'gebtext' => 'float',
'gebuehr' => 'float',
'gebuehr1' => 'float',
'rownumber' => null,
'type' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'mingeb' => 'mingeb',
'maxgeb' => 'maxgeb',
'gebtext' => 'gebtext',
'gebuehr' => 'gebuehr',
'gebuehr1' => 'gebuehr1',
'rownumber' => 'rownumber',
'type' => 'type'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'mingeb' => 'setMingeb',
'maxgeb' => 'setMaxgeb',
'gebtext' => 'setGebtext',
'gebuehr' => 'setGebuehr',
'gebuehr1' => 'setGebuehr1',
'rownumber' => 'setRownumber',
'type' => 'setType'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'mingeb' => 'getMingeb',
'maxgeb' => 'getMaxgeb',
'gebtext' => 'getGebtext',
'gebuehr' => 'getGebuehr',
'gebuehr1' => 'getGebuehr1',
'rownumber' => 'getRownumber',
'type' => 'getType'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['mingeb'] = isset($data['mingeb']) ? $data['mingeb'] : null;
        $this->container['maxgeb'] = isset($data['maxgeb']) ? $data['maxgeb'] : null;
        $this->container['gebtext'] = isset($data['gebtext']) ? $data['gebtext'] : null;
        $this->container['gebuehr'] = isset($data['gebuehr']) ? $data['gebuehr'] : null;
        $this->container['gebuehr1'] = isset($data['gebuehr1']) ? $data['gebuehr1'] : null;
        $this->container['rownumber'] = isset($data['rownumber']) ? $data['rownumber'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets mingeb
     *
     * @return float
     */
    public function getMingeb()
    {
        return $this->container['mingeb'];
    }

    /**
     * Sets mingeb
     *
     * @param float $mingeb mingeb
     *
     * @return $this
     */
    public function setMingeb($mingeb)
    {
        $this->container['mingeb'] = $mingeb;

        return $this;
    }

    /**
     * Gets maxgeb
     *
     * @return float
     */
    public function getMaxgeb()
    {
        return $this->container['maxgeb'];
    }

    /**
     * Sets maxgeb
     *
     * @param float $maxgeb mingeb
     *
     * @return $this
     */
    public function setMaxgeb($maxgeb)
    {
        $this->container['maxgeb'] = $maxgeb;

        return $this;
    }

    /**
     * Gets gebtext
     *
     * @return float
     */
    public function getGebtext()
    {
        return $this->container['gebtext'];
    }

    /**
     * Sets gebtext
     *
     * @param float $gebtext mingeb
     *
     * @return $this
     */
    public function setGebtext($gebtext)
    {
        $this->container['gebtext'] = $gebtext;

        return $this;
    }

    /**
     * Gets gebuehr
     *
     * @return float
     */
    public function getGebuehr()
    {
        return $this->container['gebuehr'];
    }

    /**
     * Sets gebuehr
     *
     * @param float $gebuehr mingeb
     *
     * @return $this
     */
    public function setGebuehr($gebuehr)
    {
        $this->container['gebuehr'] = $gebuehr;

        return $this;
    }

    /**
     * Gets gebuehr1
     *
     * @return float
     */
    public function getGebuehr1()
    {
        return $this->container['gebuehr1'];
    }

    /**
     * Sets gebuehr1
     *
     * @param float $gebuehr1 mingeb
     *
     * @return $this
     */
    public function setGebuehr1($gebuehr1)
    {
        $this->container['gebuehr1'] = $gebuehr1;

        return $this;
    }

    /**
     * Gets rownumber
     *
     * @return int
     */
    public function getRownumber()
    {
        return $this->container['rownumber'];
    }

    /**
     * Sets rownumber
     *
     * @param int $rownumber rownumber
     *
     * @return $this
     */
    public function setRownumber($rownumber)
    {
        $this->container['rownumber'] = $rownumber;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
