<?php
/**
 * PaymentTransactionDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  VOP\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * V.O.P GmbH & Co. KG - Rest API
 *
 * Rest API-Endpoint
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.22
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VOP\Rest\Model;

use \ArrayAccess;
use \VOP\Rest\ObjectSerializer;

/**
 * PaymentTransactionDetail Class Doc Comment
 *
 * @category Class
 * @package  VOP\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentTransactionDetail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PaymentTransactionDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'internal_ids' => 'int[]',
'case_year' => 'string',
'case_number' => 'string',
'invoice_year' => 'string',
'invoice_number' => 'string',
'payment_amount' => 'float',
'dunning_costs' => 'float',
'input_tax' => 'float'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'internal_ids' => null,
'case_year' => null,
'case_number' => null,
'invoice_year' => null,
'invoice_number' => null,
'payment_amount' => 'float',
'dunning_costs' => 'float',
'input_tax' => 'float'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'internal_ids' => 'internalIds',
'case_year' => 'caseYear',
'case_number' => 'caseNumber',
'invoice_year' => 'invoiceYear',
'invoice_number' => 'invoiceNumber',
'payment_amount' => 'paymentAmount',
'dunning_costs' => 'dunningCosts',
'input_tax' => 'inputTax'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'internal_ids' => 'setInternalIds',
'case_year' => 'setCaseYear',
'case_number' => 'setCaseNumber',
'invoice_year' => 'setInvoiceYear',
'invoice_number' => 'setInvoiceNumber',
'payment_amount' => 'setPaymentAmount',
'dunning_costs' => 'setDunningCosts',
'input_tax' => 'setInputTax'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'internal_ids' => 'getInternalIds',
'case_year' => 'getCaseYear',
'case_number' => 'getCaseNumber',
'invoice_year' => 'getInvoiceYear',
'invoice_number' => 'getInvoiceNumber',
'payment_amount' => 'getPaymentAmount',
'dunning_costs' => 'getDunningCosts',
'input_tax' => 'getInputTax'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['internal_ids'] = isset($data['internal_ids']) ? $data['internal_ids'] : null;
        $this->container['case_year'] = isset($data['case_year']) ? $data['case_year'] : null;
        $this->container['case_number'] = isset($data['case_number']) ? $data['case_number'] : null;
        $this->container['invoice_year'] = isset($data['invoice_year']) ? $data['invoice_year'] : null;
        $this->container['invoice_number'] = isset($data['invoice_number']) ? $data['invoice_number'] : null;
        $this->container['payment_amount'] = isset($data['payment_amount']) ? $data['payment_amount'] : null;
        $this->container['dunning_costs'] = isset($data['dunning_costs']) ? $data['dunning_costs'] : null;
        $this->container['input_tax'] = isset($data['input_tax']) ? $data['input_tax'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets internal_ids
     *
     * @return int[]
     */
    public function getInternalIds()
    {
        return $this->container['internal_ids'];
    }

    /**
     * Sets internal_ids
     *
     * @param int[] $internal_ids internalIds
     *
     * @return $this
     */
    public function setInternalIds($internal_ids)
    {
        $this->container['internal_ids'] = $internal_ids;

        return $this;
    }

    /**
     * Gets case_year
     *
     * @return string
     */
    public function getCaseYear()
    {
        return $this->container['case_year'];
    }

    /**
     * Sets case_year
     *
     * @param string $case_year year case
     *
     * @return $this
     */
    public function setCaseYear($case_year)
    {
        $this->container['case_year'] = $case_year;

        return $this;
    }

    /**
     * Gets case_number
     *
     * @return string
     */
    public function getCaseNumber()
    {
        return $this->container['case_number'];
    }

    /**
     * Sets case_number
     *
     * @param string $case_number number case
     *
     * @return $this
     */
    public function setCaseNumber($case_number)
    {
        $this->container['case_number'] = $case_number;

        return $this;
    }

    /**
     * Gets invoice_year
     *
     * @return string
     */
    public function getInvoiceYear()
    {
        return $this->container['invoice_year'];
    }

    /**
     * Sets invoice_year
     *
     * @param string $invoice_year year invoice
     *
     * @return $this
     */
    public function setInvoiceYear($invoice_year)
    {
        $this->container['invoice_year'] = $invoice_year;

        return $this;
    }

    /**
     * Gets invoice_number
     *
     * @return string
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param string $invoice_number invoice number
     *
     * @return $this
     */
    public function setInvoiceNumber($invoice_number)
    {
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets payment_amount
     *
     * @return float
     */
    public function getPaymentAmount()
    {
        return $this->container['payment_amount'];
    }

    /**
     * Sets payment_amount
     *
     * @param float $payment_amount amount paying out
     *
     * @return $this
     */
    public function setPaymentAmount($payment_amount)
    {
        $this->container['payment_amount'] = $payment_amount;

        return $this;
    }

    /**
     * Gets dunning_costs
     *
     * @return float
     */
    public function getDunningCosts()
    {
        return $this->container['dunning_costs'];
    }

    /**
     * Sets dunning_costs
     *
     * @param float $dunning_costs dunning costs
     *
     * @return $this
     */
    public function setDunningCosts($dunning_costs)
    {
        $this->container['dunning_costs'] = $dunning_costs;

        return $this;
    }

    /**
     * Gets input_tax
     *
     * @return float
     */
    public function getInputTax()
    {
        return $this->container['input_tax'];
    }

    /**
     * Sets input_tax
     *
     * @param float $input_tax input taxes
     *
     * @return $this
     */
    public function setInputTax($input_tax)
    {
        $this->container['input_tax'] = $input_tax;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
