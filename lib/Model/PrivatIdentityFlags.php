<?php
/**
 * PrivatIdentityFlags
 *
 * PHP version 5
 *
 * @category Class
 * @package  VOP\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * V.O.P GmbH & Co. KG - Rest API
 *
 * Rest API-Endpoint
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.22
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VOP\Rest\Model;

use \ArrayAccess;
use \VOP\Rest\ObjectSerializer;

/**
 * PrivatIdentityFlags Class Doc Comment
 *
 * @category Class
 * @package  VOP\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PrivatIdentityFlags implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PrivatIdentityFlags';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'valid_address' => 'bool',
'valid_person' => 'bool',
'valid_id_card' => 'bool',
'no_date_of_birth' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'valid_address' => null,
'valid_person' => null,
'valid_id_card' => null,
'no_date_of_birth' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'valid_address' => 'validAddress',
'valid_person' => 'validPerson',
'valid_id_card' => 'validIdCard',
'no_date_of_birth' => 'noDateOfBirth'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'valid_address' => 'setValidAddress',
'valid_person' => 'setValidPerson',
'valid_id_card' => 'setValidIdCard',
'no_date_of_birth' => 'setNoDateOfBirth'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'valid_address' => 'getValidAddress',
'valid_person' => 'getValidPerson',
'valid_id_card' => 'getValidIdCard',
'no_date_of_birth' => 'getNoDateOfBirth'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['valid_address'] = isset($data['valid_address']) ? $data['valid_address'] : null;
        $this->container['valid_person'] = isset($data['valid_person']) ? $data['valid_person'] : null;
        $this->container['valid_id_card'] = isset($data['valid_id_card']) ? $data['valid_id_card'] : null;
        $this->container['no_date_of_birth'] = isset($data['no_date_of_birth']) ? $data['no_date_of_birth'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets valid_address
     *
     * @return bool
     */
    public function getValidAddress()
    {
        return $this->container['valid_address'];
    }

    /**
     * Sets valid_address
     *
     * @param bool $valid_address valid adress
     *
     * @return $this
     */
    public function setValidAddress($valid_address)
    {
        $this->container['valid_address'] = $valid_address;

        return $this;
    }

    /**
     * Gets valid_person
     *
     * @return bool
     */
    public function getValidPerson()
    {
        return $this->container['valid_person'];
    }

    /**
     * Sets valid_person
     *
     * @param bool $valid_person valid person
     *
     * @return $this
     */
    public function setValidPerson($valid_person)
    {
        $this->container['valid_person'] = $valid_person;

        return $this;
    }

    /**
     * Gets valid_id_card
     *
     * @return bool
     */
    public function getValidIdCard()
    {
        return $this->container['valid_id_card'];
    }

    /**
     * Sets valid_id_card
     *
     * @param bool $valid_id_card valid idCard
     *
     * @return $this
     */
    public function setValidIdCard($valid_id_card)
    {
        $this->container['valid_id_card'] = $valid_id_card;

        return $this;
    }

    /**
     * Gets no_date_of_birth
     *
     * @return bool
     */
    public function getNoDateOfBirth()
    {
        return $this->container['no_date_of_birth'];
    }

    /**
     * Sets no_date_of_birth
     *
     * @param bool $no_date_of_birth nodate of birth
     *
     * @return $this
     */
    public function setNoDateOfBirth($no_date_of_birth)
    {
        $this->container['no_date_of_birth'] = $no_date_of_birth;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
