<?php
/**
 * EmailPaymentPromptInputParameters
 *
 * PHP version 5
 *
 * @category Class
 * @package  VOP\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * V.O.P GmbH & Co. KG - Rest API
 *
 * Rest API-Endpoint
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.22
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VOP\Rest\Model;

use \ArrayAccess;
use \VOP\Rest\ObjectSerializer;

/**
 * EmailPaymentPromptInputParameters Class Doc Comment
 *
 * @category Class
 * @package  VOP\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EmailPaymentPromptInputParameters implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'emailPaymentPromptInputParameters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bcc_address' => 'string',
'software' => 'string',
'debtor_information' => '\VOP\Rest\Model\AddressData',
'order' => '\VOP\Rest\Model\OrderInformationData',
'invoice' => '\VOP\Rest\Model\OrderInformationData',
'correction' => '\VOP\Rest\Model\OrderInformationData',
'payments' => '\VOP\Rest\Model\OrderInformationData[]',
'additional_text_information' => 'string[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'bcc_address' => null,
'software' => null,
'debtor_information' => null,
'order' => null,
'invoice' => null,
'correction' => null,
'payments' => null,
'additional_text_information' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bcc_address' => 'bccAddress',
'software' => 'software',
'debtor_information' => 'debtorInformation',
'order' => 'order',
'invoice' => 'invoice',
'correction' => 'correction',
'payments' => 'payments',
'additional_text_information' => 'additionalTextInformation'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bcc_address' => 'setBccAddress',
'software' => 'setSoftware',
'debtor_information' => 'setDebtorInformation',
'order' => 'setOrder',
'invoice' => 'setInvoice',
'correction' => 'setCorrection',
'payments' => 'setPayments',
'additional_text_information' => 'setAdditionalTextInformation'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bcc_address' => 'getBccAddress',
'software' => 'getSoftware',
'debtor_information' => 'getDebtorInformation',
'order' => 'getOrder',
'invoice' => 'getInvoice',
'correction' => 'getCorrection',
'payments' => 'getPayments',
'additional_text_information' => 'getAdditionalTextInformation'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bcc_address'] = isset($data['bcc_address']) ? $data['bcc_address'] : null;
        $this->container['software'] = isset($data['software']) ? $data['software'] : null;
        $this->container['debtor_information'] = isset($data['debtor_information']) ? $data['debtor_information'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['invoice'] = isset($data['invoice']) ? $data['invoice'] : null;
        $this->container['correction'] = isset($data['correction']) ? $data['correction'] : null;
        $this->container['payments'] = isset($data['payments']) ? $data['payments'] : null;
        $this->container['additional_text_information'] = isset($data['additional_text_information']) ? $data['additional_text_information'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bcc_address
     *
     * @return string
     */
    public function getBccAddress()
    {
        return $this->container['bcc_address'];
    }

    /**
     * Sets bcc_address
     *
     * @param string $bcc_address bcc address
     *
     * @return $this
     */
    public function setBccAddress($bcc_address)
    {
        $this->container['bcc_address'] = $bcc_address;

        return $this;
    }

    /**
     * Gets software
     *
     * @return string
     */
    public function getSoftware()
    {
        return $this->container['software'];
    }

    /**
     * Sets software
     *
     * @param string $software companys auth token
     *
     * @return $this
     */
    public function setSoftware($software)
    {
        $this->container['software'] = $software;

        return $this;
    }

    /**
     * Gets debtor_information
     *
     * @return \VOP\Rest\Model\AddressData
     */
    public function getDebtorInformation()
    {
        return $this->container['debtor_information'];
    }

    /**
     * Sets debtor_information
     *
     * @param \VOP\Rest\Model\AddressData $debtor_information debtor_information
     *
     * @return $this
     */
    public function setDebtorInformation($debtor_information)
    {
        $this->container['debtor_information'] = $debtor_information;

        return $this;
    }

    /**
     * Gets order
     *
     * @return \VOP\Rest\Model\OrderInformationData
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param \VOP\Rest\Model\OrderInformationData $order order
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets invoice
     *
     * @return \VOP\Rest\Model\OrderInformationData
     */
    public function getInvoice()
    {
        return $this->container['invoice'];
    }

    /**
     * Sets invoice
     *
     * @param \VOP\Rest\Model\OrderInformationData $invoice invoice
     *
     * @return $this
     */
    public function setInvoice($invoice)
    {
        $this->container['invoice'] = $invoice;

        return $this;
    }

    /**
     * Gets correction
     *
     * @return \VOP\Rest\Model\OrderInformationData
     */
    public function getCorrection()
    {
        return $this->container['correction'];
    }

    /**
     * Sets correction
     *
     * @param \VOP\Rest\Model\OrderInformationData $correction correction
     *
     * @return $this
     */
    public function setCorrection($correction)
    {
        $this->container['correction'] = $correction;

        return $this;
    }

    /**
     * Gets payments
     *
     * @return \VOP\Rest\Model\OrderInformationData[]
     */
    public function getPayments()
    {
        return $this->container['payments'];
    }

    /**
     * Sets payments
     *
     * @param \VOP\Rest\Model\OrderInformationData[] $payments orderData
     *
     * @return $this
     */
    public function setPayments($payments)
    {
        $this->container['payments'] = $payments;

        return $this;
    }

    /**
     * Gets additional_text_information
     *
     * @return string[]
     */
    public function getAdditionalTextInformation()
    {
        return $this->container['additional_text_information'];
    }

    /**
     * Sets additional_text_information
     *
     * @param string[] $additional_text_information additional text infos, such as shipping number
     *
     * @return $this
     */
    public function setAdditionalTextInformation($additional_text_information)
    {
        $this->container['additional_text_information'] = $additional_text_information;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
