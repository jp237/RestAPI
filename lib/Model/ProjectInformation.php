<?php
/**
 * ProjectInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  VOP\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * V.O.P GmbH & Co. KG - Rest API
 *
 * Rest API-Endpoint
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.22
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VOP\Rest\Model;

use \ArrayAccess;
use \VOP\Rest\ObjectSerializer;

/**
 * ProjectInformation Class Doc Comment
 *
 * @category Class
 * @package  VOP\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProjectInformation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProjectInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'internal_id' => 'int',
'user_project_id' => 'int',
'shop_id' => 'int',
'schufa_account' => '\VOP\Rest\Model\SchufaAccounts',
'description' => 'string',
'request_code' => 'string',
'score_rating' => 'string',
'score_value' => 'int',
'request' => 'bool',
'locked' => 'bool',
'black_list' => 'bool',
'caching' => 'bool',
'caching_range' => 'int',
'credit_limit' => 'bool',
'filter_text' => 'bool',
'no_information_rating' => 'string',
'no_information_score' => 'int',
'b2b_project' => 'bool',
'mapped_amount' => 'int',
'reservation' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'internal_id' => null,
'user_project_id' => null,
'shop_id' => null,
'schufa_account' => null,
'description' => null,
'request_code' => null,
'score_rating' => null,
'score_value' => null,
'request' => null,
'locked' => null,
'black_list' => null,
'caching' => null,
'caching_range' => null,
'credit_limit' => null,
'filter_text' => null,
'no_information_rating' => null,
'no_information_score' => null,
'b2b_project' => null,
'mapped_amount' => null,
'reservation' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'internal_id' => 'internalId',
'user_project_id' => 'userProjectId',
'shop_id' => 'shopId',
'schufa_account' => 'schufaAccount',
'description' => 'description',
'request_code' => 'requestCode',
'score_rating' => 'scoreRating',
'score_value' => 'scoreValue',
'request' => 'request',
'locked' => 'locked',
'black_list' => 'blackList',
'caching' => 'caching',
'caching_range' => 'cachingRange',
'credit_limit' => 'creditLimit',
'filter_text' => 'filterText',
'no_information_rating' => 'no_information_rating',
'no_information_score' => 'no_information_score',
'b2b_project' => 'b2bProject',
'mapped_amount' => 'mappedAmount',
'reservation' => 'reservation'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'internal_id' => 'setInternalId',
'user_project_id' => 'setUserProjectId',
'shop_id' => 'setShopId',
'schufa_account' => 'setSchufaAccount',
'description' => 'setDescription',
'request_code' => 'setRequestCode',
'score_rating' => 'setScoreRating',
'score_value' => 'setScoreValue',
'request' => 'setRequest',
'locked' => 'setLocked',
'black_list' => 'setBlackList',
'caching' => 'setCaching',
'caching_range' => 'setCachingRange',
'credit_limit' => 'setCreditLimit',
'filter_text' => 'setFilterText',
'no_information_rating' => 'setNoInformationRating',
'no_information_score' => 'setNoInformationScore',
'b2b_project' => 'setB2bProject',
'mapped_amount' => 'setMappedAmount',
'reservation' => 'setReservation'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'internal_id' => 'getInternalId',
'user_project_id' => 'getUserProjectId',
'shop_id' => 'getShopId',
'schufa_account' => 'getSchufaAccount',
'description' => 'getDescription',
'request_code' => 'getRequestCode',
'score_rating' => 'getScoreRating',
'score_value' => 'getScoreValue',
'request' => 'getRequest',
'locked' => 'getLocked',
'black_list' => 'getBlackList',
'caching' => 'getCaching',
'caching_range' => 'getCachingRange',
'credit_limit' => 'getCreditLimit',
'filter_text' => 'getFilterText',
'no_information_rating' => 'getNoInformationRating',
'no_information_score' => 'getNoInformationScore',
'b2b_project' => 'getB2bProject',
'mapped_amount' => 'getMappedAmount',
'reservation' => 'getReservation'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['internal_id'] = isset($data['internal_id']) ? $data['internal_id'] : null;
        $this->container['user_project_id'] = isset($data['user_project_id']) ? $data['user_project_id'] : null;
        $this->container['shop_id'] = isset($data['shop_id']) ? $data['shop_id'] : null;
        $this->container['schufa_account'] = isset($data['schufa_account']) ? $data['schufa_account'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['request_code'] = isset($data['request_code']) ? $data['request_code'] : null;
        $this->container['score_rating'] = isset($data['score_rating']) ? $data['score_rating'] : null;
        $this->container['score_value'] = isset($data['score_value']) ? $data['score_value'] : null;
        $this->container['request'] = isset($data['request']) ? $data['request'] : null;
        $this->container['locked'] = isset($data['locked']) ? $data['locked'] : null;
        $this->container['black_list'] = isset($data['black_list']) ? $data['black_list'] : null;
        $this->container['caching'] = isset($data['caching']) ? $data['caching'] : null;
        $this->container['caching_range'] = isset($data['caching_range']) ? $data['caching_range'] : null;
        $this->container['credit_limit'] = isset($data['credit_limit']) ? $data['credit_limit'] : null;
        $this->container['filter_text'] = isset($data['filter_text']) ? $data['filter_text'] : null;
        $this->container['no_information_rating'] = isset($data['no_information_rating']) ? $data['no_information_rating'] : null;
        $this->container['no_information_score'] = isset($data['no_information_score']) ? $data['no_information_score'] : null;
        $this->container['b2b_project'] = isset($data['b2b_project']) ? $data['b2b_project'] : null;
        $this->container['mapped_amount'] = isset($data['mapped_amount']) ? $data['mapped_amount'] : null;
        $this->container['reservation'] = isset($data['reservation']) ? $data['reservation'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets internal_id
     *
     * @return int
     */
    public function getInternalId()
    {
        return $this->container['internal_id'];
    }

    /**
     * Sets internal_id
     *
     * @param int $internal_id internalId
     *
     * @return $this
     */
    public function setInternalId($internal_id)
    {
        $this->container['internal_id'] = $internal_id;

        return $this;
    }

    /**
     * Gets user_project_id
     *
     * @return int
     */
    public function getUserProjectId()
    {
        return $this->container['user_project_id'];
    }

    /**
     * Sets user_project_id
     *
     * @param int $user_project_id userInternalProjectId
     *
     * @return $this
     */
    public function setUserProjectId($user_project_id)
    {
        $this->container['user_project_id'] = $user_project_id;

        return $this;
    }

    /**
     * Gets shop_id
     *
     * @return int
     */
    public function getShopId()
    {
        return $this->container['shop_id'];
    }

    /**
     * Sets shop_id
     *
     * @param int $shop_id shopId
     *
     * @return $this
     */
    public function setShopId($shop_id)
    {
        $this->container['shop_id'] = $shop_id;

        return $this;
    }

    /**
     * Gets schufa_account
     *
     * @return \VOP\Rest\Model\SchufaAccounts
     */
    public function getSchufaAccount()
    {
        return $this->container['schufa_account'];
    }

    /**
     * Sets schufa_account
     *
     * @param \VOP\Rest\Model\SchufaAccounts $schufa_account schufa_account
     *
     * @return $this
     */
    public function setSchufaAccount($schufa_account)
    {
        $this->container['schufa_account'] = $schufa_account;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets request_code
     *
     * @return string
     */
    public function getRequestCode()
    {
        return $this->container['request_code'];
    }

    /**
     * Sets request_code
     *
     * @param string $request_code requestCode B2C Request
     *
     * @return $this
     */
    public function setRequestCode($request_code)
    {
        $this->container['request_code'] = $request_code;

        return $this;
    }

    /**
     * Gets score_rating
     *
     * @return string
     */
    public function getScoreRating()
    {
        return $this->container['score_rating'];
    }

    /**
     * Sets score_rating
     *
     * @param string $score_rating Score Rating
     *
     * @return $this
     */
    public function setScoreRating($score_rating)
    {
        $this->container['score_rating'] = $score_rating;

        return $this;
    }

    /**
     * Gets score_value
     *
     * @return int
     */
    public function getScoreValue()
    {
        return $this->container['score_value'];
    }

    /**
     * Sets score_value
     *
     * @param int $score_value Score value max
     *
     * @return $this
     */
    public function setScoreValue($score_value)
    {
        $this->container['score_value'] = $score_value;

        return $this;
    }

    /**
     * Gets request
     *
     * @return bool
     */
    public function getRequest()
    {
        return $this->container['request'];
    }

    /**
     * Sets request
     *
     * @param bool $request request enabled
     *
     * @return $this
     */
    public function setRequest($request)
    {
        $this->container['request'] = $request;

        return $this;
    }

    /**
     * Gets locked
     *
     * @return bool
     */
    public function getLocked()
    {
        return $this->container['locked'];
    }

    /**
     * Sets locked
     *
     * @param bool $locked locked if no request
     *
     * @return $this
     */
    public function setLocked($locked)
    {
        $this->container['locked'] = $locked;

        return $this;
    }

    /**
     * Gets black_list
     *
     * @return bool
     */
    public function getBlackList()
    {
        return $this->container['black_list'];
    }

    /**
     * Sets black_list
     *
     * @param bool $black_list blacklist
     *
     * @return $this
     */
    public function setBlackList($black_list)
    {
        $this->container['black_list'] = $black_list;

        return $this;
    }

    /**
     * Gets caching
     *
     * @return bool
     */
    public function getCaching()
    {
        return $this->container['caching'];
    }

    /**
     * Sets caching
     *
     * @param bool $caching enabled caching
     *
     * @return $this
     */
    public function setCaching($caching)
    {
        $this->container['caching'] = $caching;

        return $this;
    }

    /**
     * Gets caching_range
     *
     * @return int
     */
    public function getCachingRange()
    {
        return $this->container['caching_range'];
    }

    /**
     * Sets caching_range
     *
     * @param int $caching_range caching range in months
     *
     * @return $this
     */
    public function setCachingRange($caching_range)
    {
        $this->container['caching_range'] = $caching_range;

        return $this;
    }

    /**
     * Gets credit_limit
     *
     * @return bool
     */
    public function getCreditLimit()
    {
        return $this->container['credit_limit'];
    }

    /**
     * Sets credit_limit
     *
     * @param bool $credit_limit enabled creditLimit
     *
     * @return $this
     */
    public function setCreditLimit($credit_limit)
    {
        $this->container['credit_limit'] = $credit_limit;

        return $this;
    }

    /**
     * Gets filter_text
     *
     * @return bool
     */
    public function getFilterText()
    {
        return $this->container['filter_text'];
    }

    /**
     * Sets filter_text
     *
     * @param bool $filter_text enabled filterText
     *
     * @return $this
     */
    public function setFilterText($filter_text)
    {
        $this->container['filter_text'] = $filter_text;

        return $this;
    }

    /**
     * Gets no_information_rating
     *
     * @return string
     */
    public function getNoInformationRating()
    {
        return $this->container['no_information_rating'];
    }

    /**
     * Sets no_information_rating
     *
     * @param string $no_information_rating Score rating max - no information
     *
     * @return $this
     */
    public function setNoInformationRating($no_information_rating)
    {
        $this->container['no_information_rating'] = $no_information_rating;

        return $this;
    }

    /**
     * Gets no_information_score
     *
     * @return int
     */
    public function getNoInformationScore()
    {
        return $this->container['no_information_score'];
    }

    /**
     * Sets no_information_score
     *
     * @param int $no_information_score Score value max - no information
     *
     * @return $this
     */
    public function setNoInformationScore($no_information_score)
    {
        $this->container['no_information_score'] = $no_information_score;

        return $this;
    }

    /**
     * Gets b2b_project
     *
     * @return bool
     */
    public function getB2bProject()
    {
        return $this->container['b2b_project'];
    }

    /**
     * Sets b2b_project
     *
     * @param bool $b2b_project b2b Project yes no
     *
     * @return $this
     */
    public function setB2bProject($b2b_project)
    {
        $this->container['b2b_project'] = $b2b_project;

        return $this;
    }

    /**
     * Gets mapped_amount
     *
     * @return int
     */
    public function getMappedAmount()
    {
        return $this->container['mapped_amount'];
    }

    /**
     * Sets mapped_amount
     *
     * @param int $mapped_amount mapped amount value
     *
     * @return $this
     */
    public function setMappedAmount($mapped_amount)
    {
        $this->container['mapped_amount'] = $mapped_amount;

        return $this;
    }

    /**
     * Gets reservation
     *
     * @return int
     */
    public function getReservation()
    {
        return $this->container['reservation'];
    }

    /**
     * Sets reservation
     *
     * @param int $reservation reservation
     *
     * @return $this
     */
    public function setReservation($reservation)
    {
        $this->container['reservation'] = $reservation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
