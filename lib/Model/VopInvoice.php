<?php
/**
 * VopInvoice
 *
 * PHP version 5
 *
 * @category Class
 * @package  VOP\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * V.O.P GmbH & Co. KG - Rest API
 *
 * Rest API-Endpoint
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.22
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VOP\Rest\Model;

use \ArrayAccess;
use \VOP\Rest\ObjectSerializer;

/**
 * VopInvoice Class Doc Comment
 *
 * @category Class
 * @package  VOP\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VopInvoice implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VopInvoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'invoice_year' => 'string',
'invoice_number' => 'string',
'invoice_date' => 'string',
'vat' => 'float',
'amount' => 'float',
'name' => 'string',
'name2' => 'string',
'street' => 'string',
'zipcode' => 'string',
'city' => 'string',
'payment_mandant' => 'float',
'payment_vop' => 'float',
'advance' => 'float',
'payed' => 'float',
'value' => 'float',
'direction' => 'string',
'commentary' => 'string',
'document' => 'string',
'internal_id' => 'string',
'invoice_text' => 'string',
'transaction' => 'string',
'booking_pos' => '\VOP\Rest\Model\VopInvoiceDetail[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'invoice_year' => null,
'invoice_number' => null,
'invoice_date' => null,
'vat' => 'float',
'amount' => 'float',
'name' => null,
'name2' => null,
'street' => null,
'zipcode' => null,
'city' => null,
'payment_mandant' => 'float',
'payment_vop' => 'float',
'advance' => 'float',
'payed' => 'float',
'value' => 'float',
'direction' => null,
'commentary' => null,
'document' => null,
'internal_id' => null,
'invoice_text' => null,
'transaction' => null,
'booking_pos' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'invoice_year' => 'invoiceYear',
'invoice_number' => 'invoiceNumber',
'invoice_date' => 'invoiceDate',
'vat' => 'vat',
'amount' => 'amount',
'name' => 'name',
'name2' => 'name2',
'street' => 'street',
'zipcode' => 'zipcode',
'city' => 'city',
'payment_mandant' => 'paymentMandant',
'payment_vop' => 'paymentVop',
'advance' => 'advance',
'payed' => 'payed',
'value' => 'value',
'direction' => 'direction',
'commentary' => 'commentary',
'document' => 'document',
'internal_id' => 'internalId',
'invoice_text' => 'invoiceText',
'transaction' => 'transaction',
'booking_pos' => 'bookingPos'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'invoice_year' => 'setInvoiceYear',
'invoice_number' => 'setInvoiceNumber',
'invoice_date' => 'setInvoiceDate',
'vat' => 'setVat',
'amount' => 'setAmount',
'name' => 'setName',
'name2' => 'setName2',
'street' => 'setStreet',
'zipcode' => 'setZipcode',
'city' => 'setCity',
'payment_mandant' => 'setPaymentMandant',
'payment_vop' => 'setPaymentVop',
'advance' => 'setAdvance',
'payed' => 'setPayed',
'value' => 'setValue',
'direction' => 'setDirection',
'commentary' => 'setCommentary',
'document' => 'setDocument',
'internal_id' => 'setInternalId',
'invoice_text' => 'setInvoiceText',
'transaction' => 'setTransaction',
'booking_pos' => 'setBookingPos'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'invoice_year' => 'getInvoiceYear',
'invoice_number' => 'getInvoiceNumber',
'invoice_date' => 'getInvoiceDate',
'vat' => 'getVat',
'amount' => 'getAmount',
'name' => 'getName',
'name2' => 'getName2',
'street' => 'getStreet',
'zipcode' => 'getZipcode',
'city' => 'getCity',
'payment_mandant' => 'getPaymentMandant',
'payment_vop' => 'getPaymentVop',
'advance' => 'getAdvance',
'payed' => 'getPayed',
'value' => 'getValue',
'direction' => 'getDirection',
'commentary' => 'getCommentary',
'document' => 'getDocument',
'internal_id' => 'getInternalId',
'invoice_text' => 'getInvoiceText',
'transaction' => 'getTransaction',
'booking_pos' => 'getBookingPos'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['invoice_year'] = isset($data['invoice_year']) ? $data['invoice_year'] : null;
        $this->container['invoice_number'] = isset($data['invoice_number']) ? $data['invoice_number'] : null;
        $this->container['invoice_date'] = isset($data['invoice_date']) ? $data['invoice_date'] : null;
        $this->container['vat'] = isset($data['vat']) ? $data['vat'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['name2'] = isset($data['name2']) ? $data['name2'] : null;
        $this->container['street'] = isset($data['street']) ? $data['street'] : null;
        $this->container['zipcode'] = isset($data['zipcode']) ? $data['zipcode'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['payment_mandant'] = isset($data['payment_mandant']) ? $data['payment_mandant'] : null;
        $this->container['payment_vop'] = isset($data['payment_vop']) ? $data['payment_vop'] : null;
        $this->container['advance'] = isset($data['advance']) ? $data['advance'] : null;
        $this->container['payed'] = isset($data['payed']) ? $data['payed'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['direction'] = isset($data['direction']) ? $data['direction'] : null;
        $this->container['commentary'] = isset($data['commentary']) ? $data['commentary'] : null;
        $this->container['document'] = isset($data['document']) ? $data['document'] : null;
        $this->container['internal_id'] = isset($data['internal_id']) ? $data['internal_id'] : null;
        $this->container['invoice_text'] = isset($data['invoice_text']) ? $data['invoice_text'] : null;
        $this->container['transaction'] = isset($data['transaction']) ? $data['transaction'] : null;
        $this->container['booking_pos'] = isset($data['booking_pos']) ? $data['booking_pos'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets invoice_year
     *
     * @return string
     */
    public function getInvoiceYear()
    {
        return $this->container['invoice_year'];
    }

    /**
     * Sets invoice_year
     *
     * @param string $invoice_year year
     *
     * @return $this
     */
    public function setInvoiceYear($invoice_year)
    {
        $this->container['invoice_year'] = $invoice_year;

        return $this;
    }

    /**
     * Gets invoice_number
     *
     * @return string
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param string $invoice_number number
     *
     * @return $this
     */
    public function setInvoiceNumber($invoice_number)
    {
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets invoice_date
     *
     * @return string
     */
    public function getInvoiceDate()
    {
        return $this->container['invoice_date'];
    }

    /**
     * Sets invoice_date
     *
     * @param string $invoice_date date
     *
     * @return $this
     */
    public function setInvoiceDate($invoice_date)
    {
        $this->container['invoice_date'] = $invoice_date;

        return $this;
    }

    /**
     * Gets vat
     *
     * @return float
     */
    public function getVat()
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     *
     * @param float $vat uswt
     *
     * @return $this
     */
    public function setVat($vat)
    {
        $this->container['vat'] = $vat;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets name2
     *
     * @return string
     */
    public function getName2()
    {
        return $this->container['name2'];
    }

    /**
     * Sets name2
     *
     * @param string $name2 name
     *
     * @return $this
     */
    public function setName2($name2)
    {
        $this->container['name2'] = $name2;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string $street street
     *
     * @return $this
     */
    public function setStreet($street)
    {
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets zipcode
     *
     * @return string
     */
    public function getZipcode()
    {
        return $this->container['zipcode'];
    }

    /**
     * Sets zipcode
     *
     * @param string $zipcode zipcode
     *
     * @return $this
     */
    public function setZipcode($zipcode)
    {
        $this->container['zipcode'] = $zipcode;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets payment_mandant
     *
     * @return float
     */
    public function getPaymentMandant()
    {
        return $this->container['payment_mandant'];
    }

    /**
     * Sets payment_mandant
     *
     * @param float $payment_mandant payment at mandant
     *
     * @return $this
     */
    public function setPaymentMandant($payment_mandant)
    {
        $this->container['payment_mandant'] = $payment_mandant;

        return $this;
    }

    /**
     * Gets payment_vop
     *
     * @return float
     */
    public function getPaymentVop()
    {
        return $this->container['payment_vop'];
    }

    /**
     * Sets payment_vop
     *
     * @param float $payment_vop paymentvop
     *
     * @return $this
     */
    public function setPaymentVop($payment_vop)
    {
        $this->container['payment_vop'] = $payment_vop;

        return $this;
    }

    /**
     * Gets advance
     *
     * @return float
     */
    public function getAdvance()
    {
        return $this->container['advance'];
    }

    /**
     * Sets advance
     *
     * @param float $advance advance
     *
     * @return $this
     */
    public function setAdvance($advance)
    {
        $this->container['advance'] = $advance;

        return $this;
    }

    /**
     * Gets payed
     *
     * @return float
     */
    public function getPayed()
    {
        return $this->container['payed'];
    }

    /**
     * Sets payed
     *
     * @param float $payed payed
     *
     * @return $this
     */
    public function setPayed($payed)
    {
        $this->container['payed'] = $payed;

        return $this;
    }

    /**
     * Gets value
     *
     * @return float
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param float $value value
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets direction
     *
     * @return string
     */
    public function getDirection()
    {
        return $this->container['direction'];
    }

    /**
     * Sets direction
     *
     * @param string $direction direction
     *
     * @return $this
     */
    public function setDirection($direction)
    {
        $this->container['direction'] = $direction;

        return $this;
    }

    /**
     * Gets commentary
     *
     * @return string
     */
    public function getCommentary()
    {
        return $this->container['commentary'];
    }

    /**
     * Sets commentary
     *
     * @param string $commentary commentary
     *
     * @return $this
     */
    public function setCommentary($commentary)
    {
        $this->container['commentary'] = $commentary;

        return $this;
    }

    /**
     * Gets document
     *
     * @return string
     */
    public function getDocument()
    {
        return $this->container['document'];
    }

    /**
     * Sets document
     *
     * @param string $document document base64encoded
     *
     * @return $this
     */
    public function setDocument($document)
    {
        $this->container['document'] = $document;

        return $this;
    }

    /**
     * Gets internal_id
     *
     * @return string
     */
    public function getInternalId()
    {
        return $this->container['internal_id'];
    }

    /**
     * Sets internal_id
     *
     * @param string $internal_id internalId
     *
     * @return $this
     */
    public function setInternalId($internal_id)
    {
        $this->container['internal_id'] = $internal_id;

        return $this;
    }

    /**
     * Gets invoice_text
     *
     * @return string
     */
    public function getInvoiceText()
    {
        return $this->container['invoice_text'];
    }

    /**
     * Sets invoice_text
     *
     * @param string $invoice_text invoiceText
     *
     * @return $this
     */
    public function setInvoiceText($invoice_text)
    {
        $this->container['invoice_text'] = $invoice_text;

        return $this;
    }

    /**
     * Gets transaction
     *
     * @return string
     */
    public function getTransaction()
    {
        return $this->container['transaction'];
    }

    /**
     * Sets transaction
     *
     * @param string $transaction transaction
     *
     * @return $this
     */
    public function setTransaction($transaction)
    {
        $this->container['transaction'] = $transaction;

        return $this;
    }

    /**
     * Gets booking_pos
     *
     * @return \VOP\Rest\Model\VopInvoiceDetail[]
     */
    public function getBookingPos()
    {
        return $this->container['booking_pos'];
    }

    /**
     * Sets booking_pos
     *
     * @param \VOP\Rest\Model\VopInvoiceDetail[] $booking_pos booking positions
     *
     * @return $this
     */
    public function setBookingPos($booking_pos)
    {
        $this->container['booking_pos'] = $booking_pos;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
